// Code generated by MockGen. DO NOT EDIT.
// Source: repo_mongo.go

// Package post is a generated GoMock package.
package post

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockDatabaseHelper is a mock of DatabaseHelper interface.
type MockDatabaseHelper struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseHelperMockRecorder
}

// MockDatabaseHelperMockRecorder is the mock recorder for MockDatabaseHelper.
type MockDatabaseHelperMockRecorder struct {
	mock *MockDatabaseHelper
}

// NewMockDatabaseHelper creates a new mock instance.
func NewMockDatabaseHelper(ctrl *gomock.Controller) *MockDatabaseHelper {
	mock := &MockDatabaseHelper{ctrl: ctrl}
	mock.recorder = &MockDatabaseHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseHelper) EXPECT() *MockDatabaseHelperMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockDatabaseHelper) Client() ClientHelper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(ClientHelper)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockDatabaseHelperMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockDatabaseHelper)(nil).Client))
}

// Collection mocks base method.
func (m *MockDatabaseHelper) Collection(name string) CollectionHelper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", name)
	ret0, _ := ret[0].(CollectionHelper)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockDatabaseHelperMockRecorder) Collection(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockDatabaseHelper)(nil).Collection), name)
}

// MockCollectionHelper is a mock of CollectionHelper interface.
type MockCollectionHelper struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionHelperMockRecorder
}

// MockCollectionHelperMockRecorder is the mock recorder for MockCollectionHelper.
type MockCollectionHelperMockRecorder struct {
	mock *MockCollectionHelper
}

// NewMockCollectionHelper creates a new mock instance.
func NewMockCollectionHelper(ctrl *gomock.Controller) *MockCollectionHelper {
	mock := &MockCollectionHelper{ctrl: ctrl}
	mock.recorder = &MockCollectionHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionHelper) EXPECT() *MockCollectionHelperMockRecorder {
	return m.recorder
}

// DeleteOne mocks base method.
func (m *MockCollectionHelper) DeleteOne(ctx context.Context, filter interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockCollectionHelperMockRecorder) DeleteOne(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockCollectionHelper)(nil).DeleteOne), ctx, filter)
}

// Find mocks base method.
func (m *MockCollectionHelper) Find(ctx context.Context, filter interface{}) (*mongo.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, filter)
	ret0, _ := ret[0].(*mongo.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCollectionHelperMockRecorder) Find(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCollectionHelper)(nil).Find), ctx, filter)
}

// FindOne mocks base method.
func (m *MockCollectionHelper) FindOne(arg0 context.Context, arg1 interface{}) SingleResultHelper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(SingleResultHelper)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockCollectionHelperMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockCollectionHelper)(nil).FindOne), arg0, arg1)
}

// InsertOne mocks base method.
func (m *MockCollectionHelper) InsertOne(arg0 context.Context, arg1 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockCollectionHelperMockRecorder) InsertOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockCollectionHelper)(nil).InsertOne), arg0, arg1)
}

// UpdateOne mocks base method.
func (m *MockCollectionHelper) UpdateOne(ctx context.Context, filter, update interface{}) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", ctx, filter, update)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockCollectionHelperMockRecorder) UpdateOne(ctx, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockCollectionHelper)(nil).UpdateOne), ctx, filter, update)
}

// MockSingleResultHelper is a mock of SingleResultHelper interface.
type MockSingleResultHelper struct {
	ctrl     *gomock.Controller
	recorder *MockSingleResultHelperMockRecorder
}

// MockSingleResultHelperMockRecorder is the mock recorder for MockSingleResultHelper.
type MockSingleResultHelperMockRecorder struct {
	mock *MockSingleResultHelper
}

// NewMockSingleResultHelper creates a new mock instance.
func NewMockSingleResultHelper(ctrl *gomock.Controller) *MockSingleResultHelper {
	mock := &MockSingleResultHelper{ctrl: ctrl}
	mock.recorder = &MockSingleResultHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleResultHelper) EXPECT() *MockSingleResultHelperMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockSingleResultHelper) Decode(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockSingleResultHelperMockRecorder) Decode(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockSingleResultHelper)(nil).Decode), v)
}

// MockClientHelper is a mock of ClientHelper interface.
type MockClientHelper struct {
	ctrl     *gomock.Controller
	recorder *MockClientHelperMockRecorder
}

// MockClientHelperMockRecorder is the mock recorder for MockClientHelper.
type MockClientHelperMockRecorder struct {
	mock *MockClientHelper
}

// NewMockClientHelper creates a new mock instance.
func NewMockClientHelper(ctrl *gomock.Controller) *MockClientHelper {
	mock := &MockClientHelper{ctrl: ctrl}
	mock.recorder = &MockClientHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientHelper) EXPECT() *MockClientHelperMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockClientHelper) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockClientHelperMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClientHelper)(nil).Connect))
}

// Database mocks base method.
func (m *MockClientHelper) Database(arg0 string) DatabaseHelper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database", arg0)
	ret0, _ := ret[0].(DatabaseHelper)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockClientHelperMockRecorder) Database(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockClientHelper)(nil).Database), arg0)
}

// StartSession mocks base method.
func (m *MockClientHelper) StartSession() (mongo.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession")
	ret0, _ := ret[0].(mongo.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSession indicates an expected call of StartSession.
func (mr *MockClientHelperMockRecorder) StartSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockClientHelper)(nil).StartSession))
}
