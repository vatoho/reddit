// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package post is a generated GoMock package.
package post

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user "reddit/pkg/user"
)

// MockPostRepo is a mock of PostRepo interface.
type MockPostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepoMockRecorder
}

// MockPostRepoMockRecorder is the mock recorder for MockPostRepo.
type MockPostRepoMockRecorder struct {
	mock *MockPostRepo
}

// NewMockPostRepo creates a new mock instance.
func NewMockPostRepo(ctrl *gomock.Controller) *MockPostRepo {
	mock := &MockPostRepo{ctrl: ctrl}
	mock.recorder = &MockPostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepo) EXPECT() *MockPostRepoMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockPostRepo) AddComment(commentBody string, author *user.User, postID string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", commentBody, author, postID)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockPostRepoMockRecorder) AddComment(commentBody, author, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockPostRepo)(nil).AddComment), commentBody, author, postID)
}

// AddPost mocks base method.
func (m *MockPostRepo) AddPost(post *Post, author *user.User) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", post, author)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPost indicates an expected call of AddPost.
func (mr *MockPostRepoMockRecorder) AddPost(post, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockPostRepo)(nil).AddPost), post, author)
}

// DeleteComment mocks base method.
func (m *MockPostRepo) DeleteComment(userID, postID, commentID string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", userID, postID, commentID)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostRepoMockRecorder) DeleteComment(userID, postID, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostRepo)(nil).DeleteComment), userID, postID, commentID)
}

// DeletePost mocks base method.
func (m *MockPostRepo) DeletePost(userID, postID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", userID, postID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostRepoMockRecorder) DeletePost(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostRepo)(nil).DeletePost), userID, postID)
}

// DownVote mocks base method.
func (m *MockPostRepo) DownVote(postID, userID string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownVote", postID, userID)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownVote indicates an expected call of DownVote.
func (mr *MockPostRepoMockRecorder) DownVote(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownVote", reflect.TypeOf((*MockPostRepo)(nil).DownVote), postID, userID)
}

// GetAll mocks base method.
func (m *MockPostRepo) GetAll() ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPostRepoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPostRepo)(nil).GetAll))
}

// GetPostByCategory mocks base method.
func (m *MockPostRepo) GetPostByCategory(category string) ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByCategory", category)
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByCategory indicates an expected call of GetPostByCategory.
func (mr *MockPostRepoMockRecorder) GetPostByCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByCategory", reflect.TypeOf((*MockPostRepo)(nil).GetPostByCategory), category)
}

// GetPostByID mocks base method.
func (m *MockPostRepo) GetPostByID(ID string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", ID)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostRepoMockRecorder) GetPostByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostRepo)(nil).GetPostByID), ID)
}

// GetPostsByUserID mocks base method.
func (m *MockPostRepo) GetPostsByUserID(userName string) ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUserID", userName)
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByUserID indicates an expected call of GetPostsByUserID.
func (mr *MockPostRepoMockRecorder) GetPostsByUserID(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUserID", reflect.TypeOf((*MockPostRepo)(nil).GetPostsByUserID), userName)
}

// UnVote mocks base method.
func (m *MockPostRepo) UnVote(postID, userID string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnVote", postID, userID)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnVote indicates an expected call of UnVote.
func (mr *MockPostRepoMockRecorder) UnVote(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnVote", reflect.TypeOf((*MockPostRepo)(nil).UnVote), postID, userID)
}

// UpVote mocks base method.
func (m *MockPostRepo) UpVote(postID, userID string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpVote", postID, userID)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpVote indicates an expected call of UpVote.
func (mr *MockPostRepoMockRecorder) UpVote(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpVote", reflect.TypeOf((*MockPostRepo)(nil).UpVote), postID, userID)
}
