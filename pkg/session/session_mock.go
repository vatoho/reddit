// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package session is a generated GoMock package.
package session

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user "reddit/pkg/user"
)

// MockSessManager is a mock of SessManager interface.
type MockSessManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessManagerMockRecorder
}

// MockSessManagerMockRecorder is the mock recorder for MockSessManager.
type MockSessManagerMockRecorder struct {
	mock *MockSessManager
}

// NewMockSessManager creates a new mock instance.
func NewMockSessManager(ctrl *gomock.Controller) *MockSessManager {
	mock := &MockSessManager{ctrl: ctrl}
	mock.recorder = &MockSessManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessManager) EXPECT() *MockSessManagerMockRecorder {
	return m.recorder
}

// CreateNewSession mocks base method.
func (m *MockSessManager) CreateNewSession(u *user.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewSession", u)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewSession indicates an expected call of CreateNewSession.
func (mr *MockSessManagerMockRecorder) CreateNewSession(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewSession", reflect.TypeOf((*MockSessManager)(nil).CreateNewSession), u)
}

// GetSession mocks base method.
func (m *MockSessManager) GetSession(inToken string) (*Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", inToken)
	ret0, _ := ret[0].(*Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessManagerMockRecorder) GetSession(inToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessManager)(nil).GetSession), inToken)
}
